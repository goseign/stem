syntax = "proto3";

package ledger.eventsourcing.events;
import "commons.proto";
import "scalapb/scalapb.proto";

option (scalapb.options) = {
  flat_package: true
  lenses: true
  retain_source_code_info: false
  no_default_values_in_constructor: false
  preserve_unknown_fields: false
};

message AccountEvent {

  oneof sealed_value {
    AccountOpened opened = 3;
    AccountCredited credited = 4;
    AccountDebited debited = 5;
  }
}

message AccountOpened {
}

message AccountCredited {
  string transactionId = 1;
  stem.commons.BigDecimal amount = 2 [(scalapb.field).no_box = true];
}

message AccountDebited {
  string transactionId = 1;
  stem.commons.BigDecimal amount = 2 [(scalapb.field).no_box = true];
}

message TransactionEvent {
  oneof sealed_value {
    TransactionCreated created = 1;
    TransactionAuthorized auth = 2;
    TransactionSucceeded success = 3;
    TransactionFailed failed = 4;
  }
}

message TransactionCreated {
  string from = 1 [(scalapb.field).type = "accounts.AccountId"];
  string to = 2 [(scalapb.field).type = "accounts.AccountId"];
  stem.commons.BigDecimal amount = 3 [(scalapb.field).no_box = true];
}

message TransactionAuthorized {
}

message TransactionSucceeded {
}

message TransactionFailed {
  string reason = 1;
}