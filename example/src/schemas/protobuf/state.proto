syntax = "proto3";

package ledger.eventsourcing.events;
import "scalapb/scalapb.proto";

option (scalapb.options) = {
  flat_package: true
  lenses: true
  retain_source_code_info: false
  no_default_values_in_constructor: false
  preserve_unknown_fields: false
};


import "commons.proto";

message AccountState {

  oneof sealed_value {
    EmptyAccount empty = 1;
    ActiveAccount active = 2;
  }
}

message ActiveAccount {
  stem.commons.BigDecimal balance = 1 [(scalapb.field).no_box = true];
  repeated string processedTransactions = 2 [(scalapb.field).collection_type="Set"];
}

message EmptyAccount {
}


message TransactionState {

  oneof sealed_value {
    InitialTransaction initial = 1;
    ActiveTransaction state = 2;
  }
}

message ActiveTransaction {
  stem.commons.BigDecimal amount = 1 [(scalapb.field).no_box = true];
  string from = 2 [(scalapb.field).type = "accounts.AccountId"];
  string to = 3 [(scalapb.field).type = "accounts.AccountId"];
  TransactionStatus status = 4;
}

message InitialTransaction {
}

enum TransactionStatus {
  Requested = 0;
  Authorized = 1;
  Failed = 2;
  Succeeded = 3;
}